{
  "$schema": "./ui5parserConfig.schema.json",
  "connection": {
    "root": "https://openui5.hana.ondemand.com/test-resources",
    "endpoints": [
      "sap/m/designtime/api.json",
      "sap/ui/core/designtime/api.json",
      "sap/tnt/designtime/api.json",
      "sap/ui/commons/designtime/api.json",
      "sap/ui/demokit/designtime/api.json",
      "sap/ui/dt/designtime/api.json",
      "sap/ui/layout/designtime/api.json",
      "sap/ui/suite/designtime/api.json",
      "sap/ui/table/designtime/api.json",
      "sap/ui/unified/designtime/api.json",
      "sap/ui/ux3/designtime/api.json",
      "sap/uxap/designtime/api.json"
    ]
  },
  "typeMap": {
    "*": "any",
    "any[]": "any[]",
    "array": "any[]",
    "Array": "any[]",
    "array.&lt;array.&lt;string&gt;&gt;": "string[][]",
    "arraybuffer": "any",
    "bAlwaysShow": "boolean",
    "blob": "any",
    "Boolean": "boolean",
    "CalendarAppointment": "any",
    "Control": "sap.ui.Core.Control",
    "createDefaultContent": "any",
    "date": "any",
    "Date": "any",
    "DomNode": "any",
    "DOMNode": "any",
    "domRef": "any",
    "DomRef": "any",
    "DOMRef": "any",
    "DomRef[]": "any[]",
    "element": "any",
    "Element": "any",
    "Element[]": "any[]",
    "EntityType": "any",
    "Error": "any",
    "event": "any",
    "float": "number",
    "function": "(() => any)",
    "function()": "(() => any)",
    "(() &#x3D;& gt; any)": "(a: any, b: any) => boolean",
    "Generator": "any",
    "HTMLElement": "any",
    "int": "number",
    "int[]": "number[]",
    "integer": "number",
    "InvisibleControl": "sap.ui.core.Control",
    "jQuery": "any",
    "jQuery.promise": "any",
    "jQuery.Promise": "any",
    "jQuery.sap.log": "jQuery.sap.log.Logger",
    "map": "any",
    "Map": "any",
    "MenuButton": "any",
    "null": "any",
    "Number": "number",
    "Number[]": "number[]",
    "objec": "{}",
    "object": "{}",
    "Object": "{}",
    "object[]": "{}[]",
    "ObjectNumber": "number",
    "oWindow": "any",
    "Promise": "any",
    "regexp": "string",
    "sap.m.Control": "sap.ui.core.Control",
    "sap.m.DynamicSideContent": "sap.ui.layout.DynamicSideContent",
    "sap.m.P13nConditionOperation": "any",
    "sap.m.P13nConditionOperation[]": "any[]",
    "sap.m.TabStripItem": "any",
    "sap.ui.base.ManagedObjectMetadata": "any",
    "sap.ui.base.ManageObject": "sap.ui.base.ManagedObject",
    "sap.ui.Core.Control": "sap.ui.core.Control",
    "sap.ui.core.Controller": "sap.ui.core.mvc.Controller",
    "sap.ui.core.Integer": "sap.ui.model.type.Integer",
    "sap.ui.core.InvisibleControl": "any",
    "sap.ui.core.message.MessageModel": "sap.ui.model.message.MessageModel",
    "sap.ui.core.Model": "sap.ui.model.Model",
    "sap.ui.core.String": "sap.ui.model.type.String",
    "sap.ui.demokit.UI5EntityCueCardStyle": "any",
    "sap.ui.message.MessagePaser": "sap.ui.core.message.MessageParser",
    "sap.ui.message.MessageProcessor": "sap.ui.core.message.MessageProcessor",
    "sap.ui.model.analytics.odata4analytics.ParametrizationRequest": "any",
    "sap.ui.model.odata.Filter[]": "sap.ui.model.Filter[]",
    "sap.ui.model.odata.OdataListBinding":
      "sap.ui.model.odata.ODataListBinding",
    "sap.ui.model.odata.v4.lib._MetadataRequestor": "any",
    "sap.ui.suite.TaskCircleColor": "any",
    "sap.ui.test.qunit": "any",
    "ScrollEnablement": "sap.ui.core.delegate.ScrollEnablement",
    "sting[]": "string[]",
    "String": "string",
    "string[]": "string[]",
    "String[]": "string[]",
    "TablePersoController": "any",
    "TablePersoDialog": "any",
    "Touch": "any",
    "TouchList": "any",
    "true": "boolean",
    "undefined": "any",
    "Window": "any",
    "{type:string,index:int}": "{type:string,index:number}",
    "Object.<string,function()>": "{[eventName: string]: () => any}",
    "UriParameters": "jQuery.sap.util.UriParameters",
    "[object Object]": "{}",
    "Array.<[object Object]>": "{}[]",
    "Object.<string,string>": "{[key: string]: string}",
    "IBar": "sap.m.IBar",
    "IBarHTMLTag": "sap.m.IBarHTMLTag",
    "sap.ui.commons.form.SimpleFormLayout":
      "sap.ui.layout.form.SimpleFormLayout",
    "sap.ui.commons.TitleLevel": "sap.ui.core.TitleLevel"
  },
  "enums": {
    "sap.ui.core.Popup.Dock": {}
  },
  "substitutedTypes": {
    "sap.ui.core.CSSSize":
      "declare namespace sap.ui.core {\nexport type CSSSize = string;\n}",
    "sap.ui.core.ID":
      "declare namespace sap.ui.core {\nexport type ID = string;\n}",
    "sap.ui.core.URI":
      "declare namespace sap.ui.core {\nexport type URI = string;\n}",
    "sap.ui.model.ModelName":
      "declare namespace sap.ui.model {\nexport type Modelname = string;\n}",
    "sap.m.IconTabBarSelectList":
      "declare namespace sap.m {\nexport type IconTabBarSelectList = any;\n}",
    "jQuery.sap.log.Logger":
      "declare namespace jQuery.sap.log {\nexport type Logger = {};\n}",
    "sap.ui.core.CSSColor":
      "declare namespace sap.ui.core {\nexport type CSSColor = string;\n}",
    "sap.ui.core.Dock":
      "declare namespace sap.ui.core {\nexport type Dock = 'begin top' | 'begin center' | 'begin bottom' | 'left top' | 'left center' | 'left bottom' | 'right top' | 'right center' | 'right bottom' | 'center top' | 'center center' | 'center bottom' | 'end top' | 'end center' | 'end bottom'\n}",
    "sap.ui.core.Percentage":
      "declare namespace sap.ui.core {\nexport type Percentage = string;\n}",
    "sap.ui.commons.SplitterSize":
      "declare namespace sap.ui.commons {\nexport type SplitterSize = string;\n}",
    "sap.ui.layout.GridIndent":
      "declare namespace sap.ui.layout {\nexport type GridIndent = string;\n}",
    "sap.ui.layout.GridSpan":
      "declare namespace sap.ui.layout {\nexport type GridSpan = string;\n}"
  },
  "cleanParamNames": {
    "<code>vData</code>": "vData",
    "&lt;your-page-object-name&gt;": "[key: string]"
  },
  "cacheApis": true,
  "logLevel": "Info",
  "preProcessing": {
    "correctStaticSapM": {
      "comment": "Replaces incorrect static values in sap/m",
      "script": "if(val.name) val.static = false;",
      "jsonpath":
        "$.symbols[?(@.kind == 'class' && @.module.startsWith('sap/m/'))].methods[?(@.static == true && @.name.match(/^(?!extend|getMetadata).*$/))]"
    },
    "correctTitleChangedEventType": {
      "comment": "Corrects the titleChanged event type",
      "script": "val.type = 'sap.ui.base.Event';",
      "jsonpath":
        "$.symbols[?(@.name == 'sap.ui.core.routing.Router')].events[?(@.name == 'titleChanged')].parameters.0"
    },
    "correctTargetDisplayEventType": {
      "comment": "Corrects the display event type",
      "script": "val.type = 'sap.ui.base.Event';",
      "jsonpath":
        "$.symbols[?(@.name == 'sap.ui.core.routing.Target')].events[?(@.name == 'display')].parameters.0"
    },
    "correctTargetsDisplayEventType": {
      "comment": "Corrects the display event type",
      "script": "val.type = 'sap.ui.base.Event';",
      "jsonpath":
        "$.symbols[?(@.name == 'sap.ui.core.routing.Targets')].events[?(@.name == 'display')].parameters.0"
    },
    "correctTargetsTitleChangedEventType": {
      "comment": "Corrects the display event type",
      "script": "val.type = 'sap.ui.base.Event';",
      "jsonpath":
        "$.symbols[?(@.name == 'sap.ui.core.routing.Targets')].events[?(@.name == 'titleChanged')].parameters.0"
    },
    "correctjquerysaphistory": {
      "comment": "Makes jquery sap history a namespace, not a class",
      "script": "val.kind = 'namespace';",
      "jsonpath": "$.symbols[?(@.name == 'jQuery.sap.history')]"
    }
  },
  "postProcessing": {
    "namespaces/**/*": [
      {
        "searchString":
          "sap\\.ui\\.core\\.(?:Control|Element|BusyIndicator|Component|mvc\\.Controller|mvc\\.View|mvc\\.Fragment|Fragment|Core|mvc\\.HTMLView|mvc\\.JSONView|mvc\\.JSView|tmpl\\.Template|mvc\\.TemplateView|mvc\\.XMLView)([^\\w])",
        "replacement": "{}$1",
        "isRegex": true,
        "regexFlags": "g"
      },
      {
        "isRegex": true,
        "searchString": "sap\\.ui\\.base\\.(?:Metadata|Interface)([^\\w])",
        "replacement": "{}$1",
        "regexFlags": "g"
      },
      {
        "isRegex": true,
        "searchString": "sap\\.ui\\.model\\.(?:Context)([^\\w])",
        "replacement": "{}$1",
        "regexFlags": "g"
      }
    ],
    "namespaces/sap.ui.core.BusyIndicator": [
      {
        "searchString": "declare namespace {} {",
        "replacement": "declare namespace sap.ui.core.BusyIndicator {"
      }
    ],
    "classes/sap/m/BusyDialog": [
      {
        "searchString": "public getTooltip(): BusyDialog;",
        "replacement": ""
      }
    ],
    "classes/sap/m/ComboBoxBase": [
      {
        "searchString": "public destroyItems(): ComboBox;",
        "replacement": "public destroyItems(): this;"
      }
    ],
    "classes/sap/m/NotificationListItem": [
      {
        "searchString": "public setDatetime(dateTime: {}): this;",
        "replacement": ""
      }
    ],
    "classes/sap/m/selectionDetails": [
      {
        "searchString": "attachSelectionHandler();",
        "replacement": "attachSelectionHandler(): any;"
      }
    ],
    "classes/sap/ui/base/ManagedObject": [
      {
        "searchString": "public getModel(sName?: string | any): Model;",
        "replacement": "public getModel<T>(sName?: string): Model<T>;"
      },
      {
        "searchString": "public setModel(oModel: Model, sName?: string): this;",
        "replacement":
          "public setModel<T>(oModel: Model<T>, sName?: string): this;"
      }
    ],
    "classes/sap/ui/base/EventProvider": [
      {
        "searchString": "public static getMetadata(): Metadata;",
        "replacement": "public static getMetadata(): Metadata | any;"
      }
    ],
    "classes/sap/ui/core/Element": [
      {
        "searchString":
          "public static create(<code>vData < /code>: ManagedObject|{}, oKeyInfo: {}, oScope: {}): void;",
        "replacement":
          "public static create(vData: ManagedObject|{}, oKeyInfo: {}, oScope: {}): void;"
      }
    ],
    "classes/sap/ui/model/Binding": [
      {
        "searchString":
          "public constructor(oModel: Model, sPath: string, oContext: Context, mParameters: {});",
        "replacement":
          "public constructor(oModel: Model<T>, sPath: string, oContext: Context, mParameters: {});"
      }
    ],
    "classes/sap/ui/core/Core": [
      {
        "searchString": "public getModel(sName: string | any): Model;",
        "replacement":
          "public getModel<T>(sName: sap.ui.model.ModelName): Model<T>;"
      }
    ],
    "classes/sap/ui/model/Model": [
      {
        "searchString": "(\\W)Model([^\\w\\/\\.'`])",
        "replacement": "$1Model<T>$2",
        "isRegex": true,
        "regexFlags": "g"
      },
      {
        "searchString":
          "public getProperty(sPath: string, oContext: {}): void;",
        "replacement":
          "public getOriginalProperty<K extends keyof T>(sPath: K, oContext: {}): T[K];"
      },
      {
        "searchString":
          "public getOriginalProperty(sPath: string, oContext: {}): any;",
        "replacement":
          "public getOriginalProperty<K extends keyof T>(sPath: K, oContext: {}): T[K];"
      },
      {
        "searchString":
          "public isBindingModeSupported(sMode: sap.ui.model.BindingMode): void;",
        "replacement":
          "public isBindingModeSupported(sMode: sap.ui.model.BindingMode): boolean;"
      }
    ],
    "classes/sap/ui/base/Event": [
      {
        "searchString": "(\\W)Event([^\\w\\/\\.'`])",
        "replacement": "$1Event<Tsource, Tparameters>$2",
        "isRegex": true,
        "regexFlags": "g"
      },
      {
        "searchString": "public getParameter(sName: string): any;",
        "replacement":
          "public getParameter<K extends keyof Tparameters>(sName: K): Tparameters[K];"
      },
      {
        "searchString": "public getParameters(): any;",
        "replacement": "public getParameters(): Tparameters;"
      },
      {
        "searchString": "public getSource(): EventProvider;",
        "replacement": "public getSource(): Tsource;"
      }
    ],
    "classes/sap/ui/base/Object": [
      {
        "searchString": "public getInterface(): Interface;",
        "replacement": "public getInterface(): Interface | void | {};"
      }
    ],
    "classes/sap/m/Input": [
      {
        "searchString": "public getValue(): this;",
        "replacement": "public getValue(): string;"
      },
      {
        "searchString":
          "public setAggregation(sAggregationName: string, oObject: string, bSuppressInvalidate: string): this;",
        "replacement":
          "public setAggregation(sAggregationName: string, oObject: {}, bSuppressInvalidate: boolean | undefined): this;"
      }
    ],
    "interfaces/sap/ui/core/mvc/View": [
      {
        "searchString": "static (?!extend|getMetadata)",
        "replacement": "",
        "isRegex": true,
        "regexFlags": "g"
      }
    ],
    "interfaces/sap/ui/core/mvc/Preprocessor": [
      {
        "searchString": "static (?!extend|getMetadata)",
        "replacement": "",
        "isRegex": true,
        "regexFlags": "g"
      }
    ],
    "interfaces/sap/ui/core/util/XMLPreprocessor": [
      {
        "searchString": "static (?!extend|getMetadata)",
        "replacement": "",
        "isRegex": true,
        "regexFlags": "g"
      },
      {
        "searchString": "getModel(iPart: number): Model;",
        "replacement": "getModel(iPart: number): {};"
      }
    ],
    "interfaces/sap/ui/core/util/XMLPreprocessor.IContext": [
      {
        "searchString": "static (?!extend|getMetadata)",
        "replacement": "",
        "isRegex": true,
        "regexFlags": "g"
      },
      {
        "searchString": "getModel(iPart: number): Model;",
        "replacement": "getModel(iPart: number): {};"
      }
    ],
    "interfaces/sap/ui/core/library.IFormContent": [
      {
        "searchString": "static (?!extend|getMetadata)",
        "replacement": "",
        "isRegex": true,
        "regexFlags": "g"
      }
    ],
    "interfaces/sap/ui/core/unified/libraray": [
      {
        "searchString": "static (?!extend|getMetadata)",
        "replacement": "",
        "isRegex": true,
        "regexFlags": "g"
      }
    ],
    "interfaces/sap/ui/core/library.IProcessableBlobs": [
      {
        "searchString": "static (?!extend|getMetadata)",
        "replacement": "",
        "isRegex": true,
        "regexFlags": "g"
      }
    ],
    "classes/sap/m/Router": [
      {
        "searchString": "export class Router extends Router {",
        "replacement": "export class Router extends CoreRouter {"
      }
    ],
    "classes/sap/m/Targets": [
      {
        "searchString": "export class Targets extends Targets {",
        "replacement": "export class Targets extends CoreTargets {"
      }
    ],
    "classes/sap/m/Image": [
      {
        "searchString": "import { LightBox } from 'sap/m/LightBox';",
        "replacement": ""
      },
      {
        "searchString": "public getDetailBox(): LightBox;",
        "replacement": "public getDetailBox(): {};"
      },
      {
        "searchString": "public setDetailBox(oLightBox: LightBox | any): {};",
        "replacement": "public setDetailBox(oLightBox: any): {};"
      }
    ],
    "classes/sap/m/NotificationListBase": [
      {
        "searchString":
          "public getAggregation(aggregationName: string, defaultObjectToBeCreated: {}): any[] | _NotificationListBase | any;",
        "replacement":
          "public getAggregation(aggregationName: string, defaultObjectToBeCreated: {}): any[] | any;"
      },
      {
        "searchString":
          "import { NotificationListBase as _NotificationListBase } from '/NotificationListBase';",
        "replacement": ""
      }
    ],
    "classes/sap/ui/app/Application": [
      {
        "searchString": "public static getMetadata(): Metadata;",
        "replacement": "public static getMetadata(): ComponentMetadata;"
      },
      {
        "searchString": "import { Metadata } from 'sap/ui/base/Metadata';",
        "replacement":
          "import { ComponentMetadata } from 'sap/ui/core/ComponentMetadata';"
      },
      {
        "searchString": "public setConfig(vConfig: string | {} | Model): any;",
        "replacement":
          "public setConfig<T>(vConfig: string | {} | Model<T>): any;"
      }
    ],
    "classes/jquery.sap.events": [
      {
        "searchString": "declare namespace jquery.sap.events {",
        "replacement": "declare namespace jQuery {"
      },
      {
        "searchString": "export class jQuery.Event {",
        "replacement": "export class Event {"
      }
    ],
    "classes/jquery.sap.global": [
      {
        "searchString": "declare namespace jquery.sap.global {",
        "replacement": "declare namespace jQuery.sap {"
      },
      {
        "searchString": "export class jQuery.sap.Version {",
        "replacement": "export class Version {"
      }
    ],
    "classes/sap/ui/core/routing/Target": [
      {
        "searchString": "protected destroy(): this;",
        "replacement": "public destroy(): this;"
      },
      {
        "searchString":
          "public constructor(oOptions: {}, oViews: Views, oParent: this);",
        "replacement":
          "public constructor(oOptions: {}, oViews: Views, oParent: Target);"
      }
    ]
  }
}
